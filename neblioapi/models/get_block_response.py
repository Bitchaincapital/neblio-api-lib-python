# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain  # noqa: E501

    OpenAPI spec version: 1.2.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GetBlockResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hash': 'str',
        'confirmations': 'float',
        'size': 'float',
        'height': 'float',
        'version': 'float',
        'merkleroot': 'str',
        'tx': 'list[str]',
        'time': 'float',
        'nonce': 'float',
        'bits': 'str',
        'difficulty': 'float',
        'previousblockhash': 'str',
        'nextblockhash': 'str',
        'reward': 'float'
    }

    attribute_map = {
        'hash': 'hash',
        'confirmations': 'confirmations',
        'size': 'size',
        'height': 'height',
        'version': 'version',
        'merkleroot': 'merkleroot',
        'tx': 'tx',
        'time': 'time',
        'nonce': 'nonce',
        'bits': 'bits',
        'difficulty': 'difficulty',
        'previousblockhash': 'previousblockhash',
        'nextblockhash': 'nextblockhash',
        'reward': 'reward'
    }

    def __init__(self, hash=None, confirmations=None, size=None, height=None, version=None, merkleroot=None, tx=None, time=None, nonce=None, bits=None, difficulty=None, previousblockhash=None, nextblockhash=None, reward=None):  # noqa: E501
        """GetBlockResponse - a model defined in OpenAPI"""  # noqa: E501

        self._hash = None
        self._confirmations = None
        self._size = None
        self._height = None
        self._version = None
        self._merkleroot = None
        self._tx = None
        self._time = None
        self._nonce = None
        self._bits = None
        self._difficulty = None
        self._previousblockhash = None
        self._nextblockhash = None
        self._reward = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if confirmations is not None:
            self.confirmations = confirmations
        if size is not None:
            self.size = size
        if height is not None:
            self.height = height
        if version is not None:
            self.version = version
        if merkleroot is not None:
            self.merkleroot = merkleroot
        if tx is not None:
            self.tx = tx
        if time is not None:
            self.time = time
        if nonce is not None:
            self.nonce = nonce
        if bits is not None:
            self.bits = bits
        if difficulty is not None:
            self.difficulty = difficulty
        if previousblockhash is not None:
            self.previousblockhash = previousblockhash
        if nextblockhash is not None:
            self.nextblockhash = nextblockhash
        if reward is not None:
            self.reward = reward

    @property
    def hash(self):
        """Gets the hash of this GetBlockResponse.  # noqa: E501

        Block hash  # noqa: E501

        :return: The hash of this GetBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this GetBlockResponse.

        Block hash  # noqa: E501

        :param hash: The hash of this GetBlockResponse.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def confirmations(self):
        """Gets the confirmations of this GetBlockResponse.  # noqa: E501

        Number of confirmations block has  # noqa: E501

        :return: The confirmations of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this GetBlockResponse.

        Number of confirmations block has  # noqa: E501

        :param confirmations: The confirmations of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._confirmations = confirmations

    @property
    def size(self):
        """Gets the size of this GetBlockResponse.  # noqa: E501

        Block size in bytes  # noqa: E501

        :return: The size of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GetBlockResponse.

        Block size in bytes  # noqa: E501

        :param size: The size of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def height(self):
        """Gets the height of this GetBlockResponse.  # noqa: E501

        Block height  # noqa: E501

        :return: The height of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GetBlockResponse.

        Block height  # noqa: E501

        :param height: The height of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def version(self):
        """Gets the version of this GetBlockResponse.  # noqa: E501

        Block version  # noqa: E501

        :return: The version of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetBlockResponse.

        Block version  # noqa: E501

        :param version: The version of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def merkleroot(self):
        """Gets the merkleroot of this GetBlockResponse.  # noqa: E501

        Merkleroot of block  # noqa: E501

        :return: The merkleroot of this GetBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._merkleroot

    @merkleroot.setter
    def merkleroot(self, merkleroot):
        """Sets the merkleroot of this GetBlockResponse.

        Merkleroot of block  # noqa: E501

        :param merkleroot: The merkleroot of this GetBlockResponse.  # noqa: E501
        :type: str
        """

        self._merkleroot = merkleroot

    @property
    def tx(self):
        """Gets the tx of this GetBlockResponse.  # noqa: E501

        Array of tx ids in the block  # noqa: E501

        :return: The tx of this GetBlockResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tx

    @tx.setter
    def tx(self, tx):
        """Sets the tx of this GetBlockResponse.

        Array of tx ids in the block  # noqa: E501

        :param tx: The tx of this GetBlockResponse.  # noqa: E501
        :type: list[str]
        """

        self._tx = tx

    @property
    def time(self):
        """Gets the time of this GetBlockResponse.  # noqa: E501

        Block time relative to epoch  # noqa: E501

        :return: The time of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GetBlockResponse.

        Block time relative to epoch  # noqa: E501

        :param time: The time of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._time = time

    @property
    def nonce(self):
        """Gets the nonce of this GetBlockResponse.  # noqa: E501

        Block nonce  # noqa: E501

        :return: The nonce of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this GetBlockResponse.

        Block nonce  # noqa: E501

        :param nonce: The nonce of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._nonce = nonce

    @property
    def bits(self):
        """Gets the bits of this GetBlockResponse.  # noqa: E501

        Block bits  # noqa: E501

        :return: The bits of this GetBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this GetBlockResponse.

        Block bits  # noqa: E501

        :param bits: The bits of this GetBlockResponse.  # noqa: E501
        :type: str
        """

        self._bits = bits

    @property
    def difficulty(self):
        """Gets the difficulty of this GetBlockResponse.  # noqa: E501

        Block difficulty  # noqa: E501

        :return: The difficulty of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GetBlockResponse.

        Block difficulty  # noqa: E501

        :param difficulty: The difficulty of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._difficulty = difficulty

    @property
    def previousblockhash(self):
        """Gets the previousblockhash of this GetBlockResponse.  # noqa: E501

        Hash of the previous block on the chain  # noqa: E501

        :return: The previousblockhash of this GetBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._previousblockhash

    @previousblockhash.setter
    def previousblockhash(self, previousblockhash):
        """Sets the previousblockhash of this GetBlockResponse.

        Hash of the previous block on the chain  # noqa: E501

        :param previousblockhash: The previousblockhash of this GetBlockResponse.  # noqa: E501
        :type: str
        """

        self._previousblockhash = previousblockhash

    @property
    def nextblockhash(self):
        """Gets the nextblockhash of this GetBlockResponse.  # noqa: E501

        Hash of the next block on the chain  # noqa: E501

        :return: The nextblockhash of this GetBlockResponse.  # noqa: E501
        :rtype: str
        """
        return self._nextblockhash

    @nextblockhash.setter
    def nextblockhash(self, nextblockhash):
        """Sets the nextblockhash of this GetBlockResponse.

        Hash of the next block on the chain  # noqa: E501

        :param nextblockhash: The nextblockhash of this GetBlockResponse.  # noqa: E501
        :type: str
        """

        self._nextblockhash = nextblockhash

    @property
    def reward(self):
        """Gets the reward of this GetBlockResponse.  # noqa: E501

        Number of NEBL awarded in this block  # noqa: E501

        :return: The reward of this GetBlockResponse.  # noqa: E501
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this GetBlockResponse.

        Number of NEBL awarded in this block  # noqa: E501

        :param reward: The reward of this GetBlockResponse.  # noqa: E501
        :type: float
        """

        self._reward = reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBlockResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
