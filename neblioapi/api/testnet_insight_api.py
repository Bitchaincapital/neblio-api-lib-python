# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain  # noqa: E501

    OpenAPI spec version: 1.2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from neblioapi.api_client import ApiClient


class TestnetInsightApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def testnet_get_address(self, address, **kwargs):  # noqa: E501
        """Returns address object  # noqa: E501

        Returns NEBL address object containing information on a specific address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: GetAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns address object  # noqa: E501

        Returns NEBL address object containing information on a specific address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: GetAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAddressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_balance(self, address, **kwargs):  # noqa: E501
        """Returns address balance in sats  # noqa: E501

        Returns NEBL address balance in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_balance(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_balance_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_balance_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_balance_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns address balance in sats  # noqa: E501

        Returns NEBL address balance in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_balance_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_total_received(self, address, **kwargs):  # noqa: E501
        """Returns total received by address in sats  # noqa: E501

        Returns total NEBL received by address in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_total_received(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_total_received_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_total_received_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_total_received_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns total received by address in sats  # noqa: E501

        Returns total NEBL received by address in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_total_received_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_total_received" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_total_received`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}/totalReceived', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_total_sent(self, address, **kwargs):  # noqa: E501
        """Returns total sent by address in sats  # noqa: E501

        Returns total NEBL sent by address in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_total_sent(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_total_sent_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_total_sent_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_total_sent_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns total sent by address in sats  # noqa: E501

        Returns total NEBL sent by address in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_total_sent_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_total_sent" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_total_sent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}/totalSent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_unconfirmed_balance(self, address, **kwargs):  # noqa: E501
        """Returns address unconfirmed balance in sats  # noqa: E501

        Returns NEBL address unconfirmed balance in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_unconfirmed_balance(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_unconfirmed_balance_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_unconfirmed_balance_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_unconfirmed_balance_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns address unconfirmed balance in sats  # noqa: E501

        Returns NEBL address unconfirmed balance in satoshis  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_unconfirmed_balance_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_unconfirmed_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_unconfirmed_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}/unconfirmedBalance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_utxos(self, address, **kwargs):  # noqa: E501
        """Returns all UTXOs at a given address  # noqa: E501

        Returns information on each Unspent Transaction Output contained at an address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_utxos(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_utxos_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_utxos_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_utxos_with_http_info(self, address, **kwargs):  # noqa: E501
        """Returns all UTXOs at a given address  # noqa: E501

        Returns information on each Unspent Transaction Output contained at an address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_utxos_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_utxos" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_utxos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/addr/{address}/utxo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_block(self, blockhash, **kwargs):  # noqa: E501
        """Returns information regarding a Neblio block  # noqa: E501

        Returns blockchain data for a given block based upon the block hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_block(blockhash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blockhash: Block Hash (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_block_with_http_info(blockhash, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_block_with_http_info(blockhash, **kwargs)  # noqa: E501
            return data

    def testnet_get_block_with_http_info(self, blockhash, **kwargs):  # noqa: E501
        """Returns information regarding a Neblio block  # noqa: E501

        Returns blockchain data for a given block based upon the block hash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_block_with_http_info(blockhash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blockhash: Block Hash (required)
        :return: GetBlockResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['blockhash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_block" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'blockhash' is set
        if ('blockhash' not in local_var_params or
                local_var_params['blockhash'] is None):
            raise ValueError("Missing the required parameter `blockhash` when calling `testnet_get_block`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blockhash' in local_var_params:
            path_params['blockhash'] = local_var_params['blockhash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/block/{blockhash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_block_index(self, blockindex, **kwargs):  # noqa: E501
        """Returns block hash of block  # noqa: E501

        Returns the block hash of a block at a given block index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_block_index(blockindex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float blockindex: Block Index (required)
        :return: GetBlockIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_block_index_with_http_info(blockindex, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_block_index_with_http_info(blockindex, **kwargs)  # noqa: E501
            return data

    def testnet_get_block_index_with_http_info(self, blockindex, **kwargs):  # noqa: E501
        """Returns block hash of block  # noqa: E501

        Returns the block hash of a block at a given block index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_block_index_with_http_info(blockindex, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float blockindex: Block Index (required)
        :return: GetBlockIndexResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['blockindex']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_block_index" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'blockindex' is set
        if ('blockindex' not in local_var_params or
                local_var_params['blockindex'] is None):
            raise ValueError("Missing the required parameter `blockindex` when calling `testnet_get_block_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blockindex' in local_var_params:
            path_params['blockindex'] = local_var_params['blockindex']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/block-index/{blockindex}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBlockIndexResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_raw_tx(self, txid, **kwargs):  # noqa: E501
        """Returns raw transaction hex  # noqa: E501

        Returns raw transaction hex representing a NEBL transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_raw_tx(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Transaction ID (required)
        :return: GetRawTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_raw_tx_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_raw_tx_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def testnet_get_raw_tx_with_http_info(self, txid, **kwargs):  # noqa: E501
        """Returns raw transaction hex  # noqa: E501

        Returns raw transaction hex representing a NEBL transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_raw_tx_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Transaction ID (required)
        :return: GetRawTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['txid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_raw_tx" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in local_var_params or
                local_var_params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `testnet_get_raw_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in local_var_params:
            path_params['txid'] = local_var_params['txid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/rawtx/{txid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetRawTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_status(self, **kwargs):  # noqa: E501
        """Utility API for calling several blockchain node functions  # noqa: E501

        Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def testnet_get_status_with_http_info(self, **kwargs):  # noqa: E501
        """Utility API for calling several blockchain node functions  # noqa: E501

        Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Function to call, getInfo, getDifficulty, getBestBlockHash, or getLastBlockHash
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['q']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params:
            query_params.append(('q', local_var_params['q']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_sync(self, **kwargs):  # noqa: E501
        """Get node sync status  # noqa: E501

        Returns information on the node's sync progress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_sync(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSyncResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_sync_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_sync_with_http_info(**kwargs)  # noqa: E501
            return data

    def testnet_get_sync_with_http_info(self, **kwargs):  # noqa: E501
        """Get node sync status  # noqa: E501

        Returns information on the node's sync progress  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_sync_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetSyncResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_sync" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSyncResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_tx(self, txid, **kwargs):  # noqa: E501
        """Returns transaction object  # noqa: E501

        Returns NEBL transaction object representing a NEBL transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_tx(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Transaction ID (required)
        :return: GetTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_tx_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_tx_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def testnet_get_tx_with_http_info(self, txid, **kwargs):  # noqa: E501
        """Returns transaction object  # noqa: E501

        Returns NEBL transaction object representing a NEBL transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_tx_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Transaction ID (required)
        :return: GetTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['txid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_tx" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in local_var_params or
                local_var_params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `testnet_get_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in local_var_params:
            path_params['txid'] = local_var_params['txid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/tx/{txid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_txs(self, **kwargs):  # noqa: E501
        """Get transactions by block or address  # noqa: E501

        Returns all transactions by block or address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_txs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address
        :param str block: Block Hash
        :param float page_num: Page number to display
        :return: GetTxsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_txs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_txs_with_http_info(**kwargs)  # noqa: E501
            return data

    def testnet_get_txs_with_http_info(self, **kwargs):  # noqa: E501
        """Get transactions by block or address  # noqa: E501

        Returns all transactions by block or address  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_txs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Address
        :param str block: Block Hash
        :param float page_num: Page number to display
        :return: GetTxsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address', 'block', 'page_num']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_txs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'address' in local_var_params:
            query_params.append(('address', local_var_params['address']))  # noqa: E501
        if 'block' in local_var_params:
            query_params.append(('block', local_var_params['block']))  # noqa: E501
        if 'page_num' in local_var_params:
            query_params.append(('pageNum', local_var_params['page_num']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/txs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTxsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_send_tx(self, body, **kwargs):  # noqa: E501
        """Broadcasts a signed raw transaction to the network (not NTP1 specific)  # noqa: E501

        Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_send_tx(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendTxRequest body: Object representing a transaction to broadcast (required)
        :return: BroadcastTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_send_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_send_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def testnet_send_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """Broadcasts a signed raw transaction to the network (not NTP1 specific)  # noqa: E501

        Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_send_tx_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendTxRequest body: Object representing a transaction to broadcast (required)
        :return: BroadcastTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_send_tx" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `testnet_send_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ins/tx/send', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
