# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain  # noqa: E501

    OpenAPI spec version: 1.2.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from neblioapi.api_client import ApiClient


class TestnetNTP1Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def testnet_broadcast_tx(self, body, **kwargs):  # noqa: E501
        """Broadcasts a signed raw transaction to the network  # noqa: E501

        Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_broadcast_tx(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BroadcastTxRequest body: Object representing a transaction to broadcast (required)
        :return: BroadcastTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_broadcast_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_broadcast_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def testnet_broadcast_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """Broadcasts a signed raw transaction to the network  # noqa: E501

        Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_broadcast_tx_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BroadcastTxRequest body: Object representing a transaction to broadcast (required)
        :return: BroadcastTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_broadcast_tx" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `testnet_broadcast_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/broadcast', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BroadcastTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_burn_token(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that burns an NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_burn_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BurnTokenRequest body: Object representing the token to be burned (required)
        :return: BurnTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_burn_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_burn_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def testnet_burn_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that burns an NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_burn_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BurnTokenRequest body: Object representing the token to be burned (required)
        :return: BurnTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_burn_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `testnet_burn_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/burntoken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BurnTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_address_info(self, address, **kwargs):  # noqa: E501
        """Information On a Neblio Address  # noqa: E501

        Returns both NEBL and NTP1 token UTXOs held at the given address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Neblio Address to get information on. (required)
        :return: GetAddressInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_address_info_with_http_info(address, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_address_info_with_http_info(address, **kwargs)  # noqa: E501
            return data

    def testnet_get_address_info_with_http_info(self, address, **kwargs):  # noqa: E501
        """Information On a Neblio Address  # noqa: E501

        Returns both NEBL and NTP1 token UTXOs held at the given address.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_address_info_with_http_info(address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str address: Neblio Address to get information on. (required)
        :return: GetAddressInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_address_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'address' is set
        if ('address' not in local_var_params or
                local_var_params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `testnet_get_address_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'address' in local_var_params:
            path_params['address'] = local_var_params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/addressinfo/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAddressInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_token_holders(self, tokenid, **kwargs):  # noqa: E501
        """Get Addresses Holding a Token  # noqa: E501

        Returns the the the addresses holding a token and how many tokens are held   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_holders(tokenid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :return: GetTokenHoldersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_token_holders_with_http_info(tokenid, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_token_holders_with_http_info(tokenid, **kwargs)  # noqa: E501
            return data

    def testnet_get_token_holders_with_http_info(self, tokenid, **kwargs):  # noqa: E501
        """Get Addresses Holding a Token  # noqa: E501

        Returns the the the addresses holding a token and how many tokens are held   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_holders_with_http_info(tokenid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :return: GetTokenHoldersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tokenid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_token_holders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tokenid' is set
        if ('tokenid' not in local_var_params or
                local_var_params['tokenid'] is None):
            raise ValueError("Missing the required parameter `tokenid` when calling `testnet_get_token_holders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tokenid' in local_var_params:
            path_params['tokenid'] = local_var_params['tokenid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/stakeholders/{tokenid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTokenHoldersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_token_id(self, tokensymbol, **kwargs):  # noqa: E501
        """Returns the tokenId representing a token  # noqa: E501

        Translates a token symbol to a tokenId if a token exists with that symbol on the network   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_id(tokensymbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokensymbol: Token symbol (required)
        :return: GetTokenIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_token_id_with_http_info(tokensymbol, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_token_id_with_http_info(tokensymbol, **kwargs)  # noqa: E501
            return data

    def testnet_get_token_id_with_http_info(self, tokensymbol, **kwargs):  # noqa: E501
        """Returns the tokenId representing a token  # noqa: E501

        Translates a token symbol to a tokenId if a token exists with that symbol on the network   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_id_with_http_info(tokensymbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokensymbol: Token symbol (required)
        :return: GetTokenIdResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tokensymbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_token_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tokensymbol' is set
        if ('tokensymbol' not in local_var_params or
                local_var_params['tokensymbol'] is None):
            raise ValueError("Missing the required parameter `tokensymbol` when calling `testnet_get_token_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tokensymbol' in local_var_params:
            path_params['tokensymbol'] = local_var_params['tokensymbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/tokenid/{tokensymbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTokenIdResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_token_metadata_of_issuance(self, tokenid, **kwargs):  # noqa: E501
        """Get Issuance Metadata of Token  # noqa: E501

        Returns the metadata associated with a token at time of issuance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_metadata_of_issuance(tokenid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :return: GetTokenMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_token_metadata_of_issuance_with_http_info(tokenid, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_token_metadata_of_issuance_with_http_info(tokenid, **kwargs)  # noqa: E501
            return data

    def testnet_get_token_metadata_of_issuance_with_http_info(self, tokenid, **kwargs):  # noqa: E501
        """Get Issuance Metadata of Token  # noqa: E501

        Returns the metadata associated with a token at time of issuance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_metadata_of_issuance_with_http_info(tokenid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :return: GetTokenMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tokenid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_token_metadata_of_issuance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tokenid' is set
        if ('tokenid' not in local_var_params or
                local_var_params['tokenid'] is None):
            raise ValueError("Missing the required parameter `tokenid` when calling `testnet_get_token_metadata_of_issuance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tokenid' in local_var_params:
            path_params['tokenid'] = local_var_params['tokenid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/tokenmetadata/{tokenid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTokenMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_token_metadata_of_utxo(self, tokenid, utxo, **kwargs):  # noqa: E501
        """Get UTXO Metadata of Token  # noqa: E501

        Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_metadata_of_utxo(tokenid, utxo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :param str utxo: Specific UTXO to request metadata for (required)
        :return: GetTokenMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_token_metadata_of_utxo_with_http_info(tokenid, utxo, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_token_metadata_of_utxo_with_http_info(tokenid, utxo, **kwargs)  # noqa: E501
            return data

    def testnet_get_token_metadata_of_utxo_with_http_info(self, tokenid, utxo, **kwargs):  # noqa: E501
        """Get UTXO Metadata of Token  # noqa: E501

        Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_token_metadata_of_utxo_with_http_info(tokenid, utxo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tokenid: TokenId to request metadata for (required)
        :param str utxo: Specific UTXO to request metadata for (required)
        :return: GetTokenMetadataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tokenid', 'utxo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_token_metadata_of_utxo" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tokenid' is set
        if ('tokenid' not in local_var_params or
                local_var_params['tokenid'] is None):
            raise ValueError("Missing the required parameter `tokenid` when calling `testnet_get_token_metadata_of_utxo`")  # noqa: E501
        # verify the required parameter 'utxo' is set
        if ('utxo' not in local_var_params or
                local_var_params['utxo'] is None):
            raise ValueError("Missing the required parameter `utxo` when calling `testnet_get_token_metadata_of_utxo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tokenid' in local_var_params:
            path_params['tokenid'] = local_var_params['tokenid']  # noqa: E501
        if 'utxo' in local_var_params:
            path_params['utxo'] = local_var_params['utxo']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTokenMetadataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_get_transaction_info(self, txid, **kwargs):  # noqa: E501
        """Information On an NTP1 Transaction  # noqa: E501

        Returns detailed information regarding an NTP1 transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_transaction_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Neblio txid to get information on. (required)
        :return: GetTransactionInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_get_transaction_info_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_get_transaction_info_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def testnet_get_transaction_info_with_http_info(self, txid, **kwargs):  # noqa: E501
        """Information On an NTP1 Transaction  # noqa: E501

        Returns detailed information regarding an NTP1 transaction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_get_transaction_info_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Neblio txid to get information on. (required)
        :return: GetTransactionInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['txid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_get_transaction_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in local_var_params or
                local_var_params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `testnet_get_transaction_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in local_var_params:
            path_params['txid'] = local_var_params['txid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/transactioninfo/{txid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_issue_token(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that issues a new NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_issue_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTokenRequest body: Object representing the token to be created (required)
        :return: IssueTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_issue_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_issue_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def testnet_issue_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that issues a new NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_issue_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IssueTokenRequest body: Object representing the token to be created (required)
        :return: IssueTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_issue_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `testnet_issue_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/issue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def testnet_send_token(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that sends an NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_send_token(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendTokenRequest body: Object representing the token to be sent (required)
        :return: SendTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.testnet_send_token_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.testnet_send_token_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def testnet_send_token_with_http_info(self, body, **kwargs):  # noqa: E501
        """Builds a transaction that sends an NTP1 Token  # noqa: E501

        Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.testnet_send_token_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SendTokenRequest body: Object representing the token to be sent (required)
        :return: SendTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method testnet_send_token" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `testnet_send_token`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/testnet/ntp1/sendtoken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SendTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
