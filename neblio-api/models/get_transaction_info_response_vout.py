# coding: utf-8

"""
    Neblio REST API Suite

    APIs for Interacting with NTP1 Tokens & The Neblio Blockchain  # noqa: E501

    OpenAPI spec version: 1.2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GetTransactionInfoResponseVout(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'script_pub_key': 'GetTransactionInfoResponsePreviousOutput',
        'used_blockheight': 'float',
        'used_txid': 'str',
        'tokens': 'list[GetTransactionInfoResponseTokens]',
        'used': 'bool',
        'value': 'float',
        'n': 'float',
        'blockheight': 'float'
    }

    attribute_map = {
        'script_pub_key': 'scriptPubKey',
        'used_blockheight': 'usedBlockheight',
        'used_txid': 'usedTxid',
        'tokens': 'tokens',
        'used': 'used',
        'value': 'value',
        'n': 'n',
        'blockheight': 'blockheight'
    }

    def __init__(self, script_pub_key=None, used_blockheight=None, used_txid=None, tokens=None, used=None, value=None, n=None, blockheight=None):  # noqa: E501
        """GetTransactionInfoResponseVout - a model defined in OpenAPI"""  # noqa: E501

        self._script_pub_key = None
        self._used_blockheight = None
        self._used_txid = None
        self._tokens = None
        self._used = None
        self._value = None
        self._n = None
        self._blockheight = None
        self.discriminator = None

        if script_pub_key is not None:
            self.script_pub_key = script_pub_key
        if used_blockheight is not None:
            self.used_blockheight = used_blockheight
        if used_txid is not None:
            self.used_txid = used_txid
        if tokens is not None:
            self.tokens = tokens
        if used is not None:
            self.used = used
        if value is not None:
            self.value = value
        if n is not None:
            self.n = n
        if blockheight is not None:
            self.blockheight = blockheight

    @property
    def script_pub_key(self):
        """Gets the script_pub_key of this GetTransactionInfoResponseVout.  # noqa: E501


        :return: The script_pub_key of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: GetTransactionInfoResponsePreviousOutput
        """
        return self._script_pub_key

    @script_pub_key.setter
    def script_pub_key(self, script_pub_key):
        """Sets the script_pub_key of this GetTransactionInfoResponseVout.


        :param script_pub_key: The script_pub_key of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: GetTransactionInfoResponsePreviousOutput
        """

        self._script_pub_key = script_pub_key

    @property
    def used_blockheight(self):
        """Gets the used_blockheight of this GetTransactionInfoResponseVout.  # noqa: E501

        Blockheight this output was used in  # noqa: E501

        :return: The used_blockheight of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: float
        """
        return self._used_blockheight

    @used_blockheight.setter
    def used_blockheight(self, used_blockheight):
        """Sets the used_blockheight of this GetTransactionInfoResponseVout.

        Blockheight this output was used in  # noqa: E501

        :param used_blockheight: The used_blockheight of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: float
        """

        self._used_blockheight = used_blockheight

    @property
    def used_txid(self):
        """Gets the used_txid of this GetTransactionInfoResponseVout.  # noqa: E501

        TXID this output was used in  # noqa: E501

        :return: The used_txid of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: str
        """
        return self._used_txid

    @used_txid.setter
    def used_txid(self, used_txid):
        """Sets the used_txid of this GetTransactionInfoResponseVout.

        TXID this output was used in  # noqa: E501

        :param used_txid: The used_txid of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: str
        """

        self._used_txid = used_txid

    @property
    def tokens(self):
        """Gets the tokens of this GetTransactionInfoResponseVout.  # noqa: E501


        :return: The tokens of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: list[GetTransactionInfoResponseTokens]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this GetTransactionInfoResponseVout.


        :param tokens: The tokens of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: list[GetTransactionInfoResponseTokens]
        """

        self._tokens = tokens

    @property
    def used(self):
        """Gets the used of this GetTransactionInfoResponseVout.  # noqa: E501

        Whether this output has now been used  # noqa: E501

        :return: The used of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this GetTransactionInfoResponseVout.

        Whether this output has now been used  # noqa: E501

        :param used: The used of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: bool
        """

        self._used = used

    @property
    def value(self):
        """Gets the value of this GetTransactionInfoResponseVout.  # noqa: E501

        Value of the output in NEBL satoshi  # noqa: E501

        :return: The value of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetTransactionInfoResponseVout.

        Value of the output in NEBL satoshi  # noqa: E501

        :param value: The value of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def n(self):
        """Gets the n of this GetTransactionInfoResponseVout.  # noqa: E501

        Output index  # noqa: E501

        :return: The n of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: float
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this GetTransactionInfoResponseVout.

        Output index  # noqa: E501

        :param n: The n of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: float
        """

        self._n = n

    @property
    def blockheight(self):
        """Gets the blockheight of this GetTransactionInfoResponseVout.  # noqa: E501

        Blockheight of this transaction  # noqa: E501

        :return: The blockheight of this GetTransactionInfoResponseVout.  # noqa: E501
        :rtype: float
        """
        return self._blockheight

    @blockheight.setter
    def blockheight(self, blockheight):
        """Sets the blockheight of this GetTransactionInfoResponseVout.

        Blockheight of this transaction  # noqa: E501

        :param blockheight: The blockheight of this GetTransactionInfoResponseVout.  # noqa: E501
        :type: float
        """

        self._blockheight = blockheight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetTransactionInfoResponseVout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
